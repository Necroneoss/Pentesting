from django.shortcuts import render,redirect
from django.http import HttpResponse,JsonResponse,StreamingHttpResponse
from django.contrib.auth.models import User
from django.contrib import messages
import os
import subprocess
import json
import time
import threading

# Create your views here.
processes = {}

def index(request):

    # Page from the theme 
    return render(request, 'pages/index.html')
# Página con tabla vacía
def empty_table(request):
    return render(request, 'pages/empty_table.html')
# Vista para el Dashboard
def dashboard(request):
    return render(request, 'dashboard.html')

# Vista para la lista de usuarios (solo para superusuario)
def user_list(request):
    users = User.objects.all()  # Obtiene todos los usuarios de la base de datos
    return render(request, 'pages/usuarios/user_list.html', {'users': users})

#crear en el usuario
def create_user(request):
    if request.method == 'POST':
        try:
            # Obtener datos del formulario
            username = request.POST.get('username')
            email = request.POST.get('email')
            first_name = request.POST.get('first_name')
            last_name = request.POST.get('last_name')
            is_active = request.POST.get('is_active') == 'True'
            password = request.POST.get('password')

            # Validar si el usuario ya existe
            if User.objects.filter(username=username).exists():
                messages.error(request, f'El nombre de usuario "{username}" ya existe.')
                return redirect('user_list')

            # Crear el usuario
            user = User.objects.create_user(
                username=username,
                email=email,
                first_name=first_name,
                last_name=last_name,
                is_active=is_active,
                password=password
            )

            # Guardar y mostrar mensaje de éxito
            user.save()
            messages.success(request, f'Usuario "{username}" creado exitosamente.')

        except Exception as e:
            # Mensaje de error en caso de excepción
            messages.error(request, f'Ocurrió un error al crear el usuario: {str(e)}')

        return redirect('user_list')

# editar en la vista
def edit_user(request):
    if request.method == 'POST':
        try:
            user_id = request.POST.get('user_id')
            username = request.POST.get('username')
            email = request.POST.get('email')
            first_name = request.POST.get('first_name')
            last_name = request.POST.get('last_name')
            is_active = request.POST.get('is_active') == 'True'
            password = request.POST.get('password')

            # Obtiene el usuario de la base de datos
            user = User.objects.get(id=user_id)
            user.username = username
            user.email = email
            user.first_name = first_name
            user.last_name = last_name
            user.is_active = is_active

            if password:  # Si se proporciona una nueva contraseña, actualiza la contraseña
                user.set_password(password)

            user.save()

            # Mensaje de éxito
            messages.success(request, 'La operación se realizó con éxito.')

        except Exception as e:
            # Mensaje de error
            messages.error(request, f'Ocurrió un error: {str(e)}')

        return redirect('user_list')
# Vista para el Escáner Automatizado
def scanner(request):
    # Aquí puedes agregar la lógica para el escáner automatizado
    return render(request, 'pages/scanner/scanner.html')
def run_command(request):
    if request.method == 'POST':
        try:
            # Leer el dominio enviado por el cliente
            data = json.loads(request.body)
            domain = data.get('target_url')
            new_analysis = data.get('new_analysis', False)

            if not domain:
                return JsonResponse({'error': 'No se proporcionó un dominio válido'}, status=400)

            # Rutas del archivo JSON y logs
            oneforall_path = r"C:\Users\PC\Desktop\Pentesting\django-adminlte\consola\OneForAll"
            output_path = os.path.join(oneforall_path, 'results', f'{domain}.json')
            log_file = os.path.join('logs', f'{domain}_log.txt')

            # Verificar si el análisis ya existe y no se requiere nuevo análisis
            if os.path.exists(output_path) and not new_analysis:
                return JsonResponse({
                    'exists': True,
                    'message': f'El análisis para {domain} ya existe.',
                    'log_file': log_file
                }, status=200)

            # Asegúrate de que exista el directorio de logs
            os.makedirs('logs', exist_ok=True)

            # Crear el archivo de log vacío si no existe
            if not os.path.exists(log_file):
                with open(log_file, 'w', encoding='utf-8') as f:
                    f.write("Iniciando el análisis...\n")

            # Comando para ejecutar OneForAll
            command = [
                'python',
                'oneforall.py',
                '--target', domain,
                '--alive', 'True',
                '--fmt', 'json',
                'run'
            ]

            # Función para ejecutar el comando en un hilo
            def execute_command():
                with open(log_file, 'w', encoding='utf-8', buffering=1) as f:
                    process = subprocess.Popen(
                        command,
                        cwd=oneforall_path,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        text=True
                    )
                    # Almacena el proceso en el diccionario global
                    processes[domain] = process

                    for line in iter(process.stdout.readline, ''):
                        f.write(line)
                        f.flush()
                    process.stdout.close()
                    process.wait()
                    # Elimina el proceso del diccionario una vez completado
                    if domain in processes:
                        del processes[domain]

            # Inicia la ejecución en un hilo
            thread = threading.Thread(target=execute_command)
            thread.start()

            return JsonResponse({
                'exists': False,
                'message': 'Nuevo análisis iniciado.',
                'log_file': log_file
            }, status=200)

        except Exception as e:
            return JsonResponse({'error': f'Error interno: {str(e)}'}, status=500)

    return JsonResponse({'error': 'Método no permitido'}, status=405)
def stop_command(request):
    if request.method == 'POST':
        try:
            # Leer el dominio enviado por el cliente
            data = json.loads(request.body)
            domain = data.get('target_url')

            if not domain:
                return JsonResponse({'error': 'No se proporcionó un dominio válido'}, status=400)

            # Detener el proceso si está en ejecución
            if domain in processes:
                process = processes[domain]
                process.terminate()  # Finaliza el subproceso
                del processes[domain]  # Elimina del diccionario
                return JsonResponse({'message': f'Proceso para {domain} detenido exitosamente.'}, status=200)
            else:
                return JsonResponse({'error': f'No hay un proceso en ejecución para {domain}.'}, status=404)

        except Exception as e:
            return JsonResponse({'error': f'Error interno: {str(e)}'}, status=500)

    return JsonResponse({'error': 'Método no permitido'}, status=405)


def get_logs(request):
    log_file = request.GET.get('log_file')
    if not log_file or not os.path.exists(log_file):
        return JsonResponse({'error': 'Archivo de log no encontrado'}, status=404)

    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            logs = f.readlines()
        return JsonResponse({'logs': logs}, status=200)
    except Exception as e:
        return JsonResponse({'error': f'Error al leer el log: {str(e)}'}, status=500)



def pentesting(request):
    # Captura el dominio desde los parámetros GET
    domain = request.GET.get('domain')  # El dominio ahora se pasa como parámetro en la URL
    if not domain:
        return JsonResponse({'error': 'No se proporcionó un dominio válido'}, status=400)
    
    try:
        # Define el directorio donde se almacenan los resultados de OneForAll
        oneforall_path = r"C:\Users\PC\Desktop\Pentesting\django-adminlte\consola\OneForAll"
        output_path = os.path.join(oneforall_path, 'results', f'{domain}.json')

        # Verificar si el archivo existe
        if os.path.exists(output_path):
            # Cargar los datos del archivo JSON
            with open(output_path, 'r', encoding='utf-8') as f:
                subdomains_data = json.load(f)
        else:
            # Si no existe el archivo, enviar un mensaje de error
            return JsonResponse({'error': f'No se encontraron resultados para {domain}'}, status=404)

        # Crear nodos y enlaces para el grafo
        nodes = []
        edges = []
        for idx, entry in enumerate(subdomains_data):
            nodes.append({
                'id': idx + 1,
                'label': entry.get('subdomain', 'Unknown'),
                'url': entry.get('url', '#'),
            })
        
        # Crear enlaces ficticios (opcional, solo como demostración)
        for i in range(len(nodes) - 1):
            edges.append({'from': nodes[i]['id'], 'to': nodes[i + 1]['id']})

        # Renderizar el template con los datos procesados
        return render(request, 'pages/scanner/pentesting.html', {
            'subdomains': subdomains_data,
            'nodes': nodes,
            'edges': edges,
        })
    
    except Exception as e:
        # Manejar errores inesperados
        return JsonResponse({'error': f'Ocurrió un error al cargar los resultados: {str(e)}'}, status=500)



# Vista para los Reportes
def reportes(request):
    # Aquí puedes agregar la lógica para los reportes
    return render(request, 'pages/reportes/reportes.html')
